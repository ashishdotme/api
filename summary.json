{
  "locations": [
    {
      "id": 4702,
      "batteryState": "charging",
      "coordinates": "{\"-6.2263197\",\"53.2629535\"}",
      "batteryLevel": 25,
      "timestamp": "2024-12-15T13:22:46.000Z",
      "createdAt": "2024-12-15T13:22:48.017Z",
      "updatedAt": "2024-12-15T13:22:48.017Z"
    }
  ],
  "steps": [
    {
      "id": 8865,
      "stepCount": 6706,
      "date": "12/30/24",
      "fullDate": "2024-12-30T00:00:00.000Z",
      "createdAt": "2024-12-31T08:30:18.420Z",
      "updatedAt": "2024-12-31T08:30:18.420Z"
    }
  ],
  "sleep": [
    {
      "id": 227,
      "sleep": "6.3",
      "date": "12/20/24",
      "fullDate": "2024-12-20T00:00:00.000Z",
      "sleepStart": "2024-12-20T02:36:00.000Z",
      "sleepEnd": "2024-12-20T08:31:59.000Z",
      "createdAt": "2024-12-21T01:07:24.195Z",
      "updatedAt": "2024-12-21T01:07:24.195Z"
    }
  ],
  "word": [
    {
      "id": 1,
      "word": "clandestine",
      "meaning": "characterized by, done in, or executed with secrecy or concealment, especially for purposes of subversion or deception; private or surreptitious",
      "pronounciation": "klan-des-tin",
      "sentences": "Their clandestine meetings went undiscovered for two years.",
      "createdAt": "2022-01-24T19:45:33.772Z",
      "updatedAt": "2022-01-24T19:45:33.772Z"
    }
  ],
  "quote": [
    {
      "id": 2,
      "quote": "If something upsets you, it is not that thing, but your judgement of it, that causes you distress. And that judgement is in your power",
      "category": "Motivational",
      "author": "Marcus Aurelius",
      "createdAt": "2024-10-21T22:30:21.598Z",
      "updatedAt": "2024-10-21T22:30:21.598Z"
    }
  ],
  "shows": [
    {
      "id": 22,
      "title": "Peep Show Season 9",
      "language": "English",
      "showName": "Peep Show",
      "description": "Mark and Jez are a couple of twenty-something roommates who have nothing in common - except for the fact that their lives are anything but normal. Mayhem ensues as the pair strive to cope with day-to-day life.",
      "seasonNumber": 9,
      "year": 2003,
      "genre": "Comedy",
      "startedDate": "2022-01-31T00:00:00.000Z",
      "completedDate": null,
      "status": "Started",
      "loved": true,
      "imdbRating": "8.6",
      "imdbId": "tt0387764",
      "createdAt": "2022-02-01T01:30:32.275Z",
      "updatedAt": "2022-02-01T01:30:32.275Z"
    }
  ],
  "books": [
    {
      "id": 11,
      "title": "Atomic Habits",
      "author": " James Clear",
      "poster": "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1655988385i/40121378.jpg",
      "description": "No matter your goals, Atomic Habits offers a proven framework for improvingâ€”every day. James Clear, one of the world's leading experts on habit formation, reveals practical strategies that will teach you exactly how to form good habits, break bad ones, and master the tiny behaviors that lead to remarkable results.",
      "notes": "Atomic Habits",
      "year": 2018,
      "genre": "Personal Development",
      "completedDate": "2023-02-08T00:00:00.000Z",
      "loved": true,
      "createdAt": "2024-10-22T14:53:34.755Z",
      "updatedAt": "2024-10-22T14:53:34.755Z"
    }
  ],
  "courses": [
    {
      "id": 2,
      "title": "MERN Stack Front To Back: Full Stack React, Redux & Node.js",
      "description": "Build and deploy a social network with Node.js, Express, React, Redux & MongoDB",
      "author": "Brad Traversy",
      "category": "React",
      "notes": "NA",
      "completedDate": "2019-01-02T00:00:00.000Z",
      "platform": "Udemy",
      "createdAt": "2022-01-21T03:28:37.957Z",
      "updatedAt": "2022-01-21T03:28:37.957Z"
    }
  ],
  "movies": [
    {
      "id": 166,
      "title": "The Exorcist",
      "description": "When a mysterious entity possesses a young girl, her mother seeks the help of two Catholic priests to save her life.",
      "review": null,
      "language": "English",
      "year": 1973,
      "genre": "Horror",
      "viewingDate": "2024-12-02T04:53:18.239Z",
      "loved": true,
      "imdbRating": "8.1",
      "imdbId": "tt0070047",
      "createdAt": "2024-12-02T14:59:17.397Z",
      "updatedAt": "2024-12-02T14:59:17.397Z"
    }
  ],
  "tasks": [],
  "updates": [
    {
      "id": 11,
      "category": "Life",
      "content": null,
      "title": "Moved to Dublin, Ireland",
      "date": "2021-09-13T10:29:42.297Z",
      "createdAt": "2024-09-15T13:36:36.858Z",
      "updatedAt": "2024-09-15T13:36:36.858Z"
    },
    {
      "id": 10,
      "category": "Life",
      "content": null,
      "title": "Started job at Honeywell, India",
      "date": "2020-10-12T10:29:42.297Z",
      "createdAt": "2024-09-15T13:32:54.840Z",
      "updatedAt": "2024-09-15T13:32:54.840Z"
    },
    {
      "id": 9,
      "category": "Life",
      "content": null,
      "title": "Started job at Amdocs, India",
      "date": "2019-01-19T10:29:42.297Z",
      "createdAt": "2024-09-15T13:28:28.681Z",
      "updatedAt": "2024-09-15T13:33:11.559Z"
    },
    {
      "id": 8,
      "category": "Life",
      "content": null,
      "title": "Started job at Nitor Infotech",
      "date": "2016-06-27T10:29:42.000Z",
      "createdAt": "2024-09-15T13:27:56.348Z",
      "updatedAt": "2024-09-15T13:35:21.819Z"
    },
    {
      "id": 7,
      "category": "Life",
      "content": null,
      "title": "Moved to Pune, India",
      "date": "2016-06-17T10:29:42.000Z",
      "createdAt": "2024-09-15T13:22:04.990Z",
      "updatedAt": "2024-09-15T13:35:34.498Z"
    },
    {
      "id": 6,
      "category": "Life",
      "content": null,
      "title": "Graduated in Computer Science and Engineering from Nagpur University, India",
      "date": "2016-05-30T10:29:42.297Z",
      "createdAt": "2024-09-15T13:21:23.009Z",
      "updatedAt": "2024-09-15T13:32:38.727Z"
    },
    {
      "id": 5,
      "category": "Life",
      "content": null,
      "title": "Born in Chhattisgarh, India",
      "date": "1993-06-04T10:29:42.297Z",
      "createdAt": "2024-09-15T13:19:16.078Z",
      "updatedAt": "2024-09-15T13:19:16.078Z"
    }
  ],
  "listens": [
    {
      "id": 1262,
      "title": "Raanjhan (From \"Do Patti\")",
      "artist": "Sachet-Parampara",
      "album": "Raanjhan (From \"Do Patti\")",
      "releaseYear": null,
      "genre": null,
      "listenDate": "2024-12-31T09:59:42.000Z",
      "trackNumber": null,
      "createdAt": "2024-12-31T09:59:43.630Z",
      "updatedAt": "2024-12-31T09:59:43.630Z"
    }
  ],
  "github": {
    "lastCommit": "2024-12-30T12:09:05Z",
    "recentRepos": [
      {
        "name": "leetcode-python",
        "pushedAt": "2024-12-30T12:09:05Z"
      },
      {
        "name": "omakub",
        "pushedAt": "2024-12-16T20:11:21Z"
      },
      {
        "name": "books.ashish.me",
        "pushedAt": "2024-12-05T23:03:00Z"
      },
      {
        "name": "shows.ashish.me",
        "pushedAt": "2024-12-05T23:01:49Z"
      },
      {
        "name": "movies.ashish.me",
        "pushedAt": "2024-12-05T23:00:50Z"
      },
      {
        "name": "wiki.ashish.me",
        "pushedAt": "2024-11-20T00:13:30Z"
      },
      {
        "name": "dotfiles",
        "pushedAt": "2024-11-19T23:35:30Z"
      },
      {
        "name": "cli",
        "pushedAt": "2024-11-11T22:05:56Z"
      },
      {
        "name": "blog",
        "pushedAt": "2024-11-11T15:34:12Z"
      },
      {
        "name": "workers",
        "pushedAt": "2024-11-10T10:49:26Z"
      },
      {
        "name": "ashishdotme-utils",
        "pushedAt": "2024-11-09T00:31:07Z"
      },
      {
        "name": "npm-library-starter",
        "pushedAt": "2024-11-08T23:32:13Z"
      },
      {
        "name": "task-tracker",
        "pushedAt": "2024-11-08T23:08:27Z"
      },
      {
        "name": "jobsapi.ashish.me",
        "pushedAt": "2024-11-05T23:21:30Z"
      },
      {
        "name": "dashy",
        "pushedAt": "2024-10-16T17:47:56Z"
      },
      {
        "name": "dashboard.ashish.me",
        "pushedAt": "2024-09-14T17:51:29Z"
      }
    ]
  },
  "lastLeetcode": {
    "path": "Array_Easy_0661-image-smoother_solution.py",
    "title": "solution.py",
    "body": "```python  \n# Created by Ashish Patel at 2024/12/28 22:33\n# leetgo: 1.4.13\n# https://leetcode.com/problems/image-smoother/\n\n\"\"\"\n661. Image Smoother (Easy)\nAn **image smoother** is a filter of the size 3 x 3 that can be applied to each cell of an image\nby rounding down the average of the cell and the eight surrounding cells (i.e., the average of the\nnine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present,\nwe do not consider it in the average (i.e., the average of the four cells in the red smoother).\n\n![](https://assets.leetcode.com/uploads/2021/05/03/smoother-grid.jpg)\n\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after\napplying the smoother on each cell of it.\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/smooth-grid.jpg)\n\n\nInput: img = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[0,0,0],[0,0,0],[0,0,0]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/smooth2-grid.jpg)\n\n\nInput: img = [[100,200,100],[200,50,200],[100,200,100]]\nOutput: [[137,141,137],[141,138,141],[137,141,137]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) =\n141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n\n\n**Constraints:**\n\n- m == img.length\n- n == img[i].length\n- 1 <= m, n <= 200\n- 0 <= img[i][j] <= 255\n\n\"\"\"\n\nfrom typing import *\nfrom leetgo_py import *\n\nimport bisect\nimport collections \nimport functools\nimport heapq \nimport itertools \nimport operator\nimport math \nimport string\n\n# @lc code=begin\n\nclass Solution:\n    def imageSmoother(self, img: List[List[int]]) -> List[List[int]]:\n        result = []\n        \n        def calculate_average(row, col):\n            top = max(0, row + 1)\n            bottom = max(0, row - 1)\n            left = max(0, col - 1)\n            right = max(0, col + 1)\n            \n        for row in range(len(img)):\n            for col in range(len(img[0])):\n                img[row][col] = calculate_average(row, col)\n        \n        \n        \n        return img\n\n# @lc code=end\n\nif __name__ == \"__main__\":\n    img = [[100,200,100],[200,50,200],[100,200,100]]\n    ans = Solution().imageSmoother(img)\n    print(\"\\noutput:\", serialize(ans, \"integer[][]\"))\n```",
    "topic1": "Array",
    "topic2": "Easy",
    "topic3": "0661-image-smoother",
    "url": "https://github.com/ashishdotme/leetcode-python/blob/master/Array/Easy/0661-image-smoother/solution.py",
    "slug": "solution",
    "html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"># Created by Ashish Patel at 2024/12/28 22:33</span>\n<span class=\"pl-c\"># leetgo: 1.4.13</span>\n<span class=\"pl-c\"># https://leetcode.com/problems/image-smoother/</span>\n\n<span class=\"pl-s\">\"\"\"</span>\n<span class=\"pl-s\">661. Image Smoother (Easy)</span>\n<span class=\"pl-s\">An **image smoother** is a filter of the size 3 x 3 that can be applied to each cell of an image</span>\n<span class=\"pl-s\">by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the</span>\n<span class=\"pl-s\">nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present,</span>\n<span class=\"pl-s\">we do not consider it in the average (i.e., the average of the four cells in the red smoother).</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">![](https://assets.leetcode.com/uploads/2021/05/03/smoother-grid.jpg)</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Given an m x n integer matrix img representing the grayscale of an image, return the image after</span>\n<span class=\"pl-s\">applying the smoother on each cell of it.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Example 1:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">![](https://assets.leetcode.com/uploads/2021/05/03/smooth-grid.jpg)</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Input: img = [[1,1,1],[1,0,1],[1,1,1]]</span>\n<span class=\"pl-s\">Output: [[0,0,0],[0,0,0],[0,0,0]]</span>\n<span class=\"pl-s\">Explanation:</span>\n<span class=\"pl-s\">For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0</span>\n<span class=\"pl-s\">For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0</span>\n<span class=\"pl-s\">For the point (1,1): floor(8/9) = floor(0.88888889) = 0</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Example 2:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">![](https://assets.leetcode.com/uploads/2021/05/03/smooth2-grid.jpg)</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Input: img = [[100,200,100],[200,50,200],[100,200,100]]</span>\n<span class=\"pl-s\">Output: [[137,141,137],[141,138,141],[137,141,137]]</span>\n<span class=\"pl-s\">Explanation:</span>\n<span class=\"pl-s\">For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137</span>\n<span class=\"pl-s\">For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) =</span>\n<span class=\"pl-s\">141</span>\n<span class=\"pl-s\">For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Constraints:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">- m == img.length</span>\n<span class=\"pl-s\">- n == img[i].length</span>\n<span class=\"pl-s\">- 1 &lt;= m, n &lt;= 200</span>\n<span class=\"pl-s\">- 0 &lt;= img[i][j] &lt;= 255</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">\"\"\"</span>\n\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">typing</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">leetgo_py</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">bisect</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">collections</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">functools</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">heapq</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">itertools</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">operator</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">math</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">string</span>\n\n<span class=\"pl-c\"># @lc code=begin</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Solution</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">imageSmoother</span>(<span class=\"pl-s1\">self</span>, <span class=\"pl-s1\">img</span>: <span class=\"pl-v\">List</span>[<span class=\"pl-v\">List</span>[<span class=\"pl-smi\">int</span>]]) <span class=\"pl-c1\">-&gt;</span> <span class=\"pl-v\">List</span>[<span class=\"pl-v\">List</span>[<span class=\"pl-smi\">int</span>]]:\n        <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> []\n        \n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">calculate_average</span>(<span class=\"pl-s1\">row</span>, <span class=\"pl-s1\">col</span>):\n            <span class=\"pl-s1\">top</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">max</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s1\">row</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">1</span>)\n            <span class=\"pl-s1\">bottom</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">max</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s1\">row</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span>)\n            <span class=\"pl-s1\">left</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">max</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s1\">col</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span>)\n            <span class=\"pl-s1\">right</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">max</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s1\">col</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">1</span>)\n            \n        <span class=\"pl-k\">for</span> <span class=\"pl-s1\">row</span> <span class=\"pl-c1\">in</span> <span class=\"pl-en\">range</span>(<span class=\"pl-en\">len</span>(<span class=\"pl-s1\">img</span>)):\n            <span class=\"pl-k\">for</span> <span class=\"pl-s1\">col</span> <span class=\"pl-c1\">in</span> <span class=\"pl-en\">range</span>(<span class=\"pl-en\">len</span>(<span class=\"pl-s1\">img</span>[<span class=\"pl-c1\">0</span>])):\n                <span class=\"pl-s1\">img</span>[<span class=\"pl-s1\">row</span>][<span class=\"pl-s1\">col</span>] <span class=\"pl-c1\">=</span> <span class=\"pl-en\">calculate_average</span>(<span class=\"pl-s1\">row</span>, <span class=\"pl-s1\">col</span>)\n        \n        \n        \n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">img</span>\n\n<span class=\"pl-c\"># @lc code=end</span>\n\n<span class=\"pl-k\">if</span> <span class=\"pl-s1\">__name__</span> <span class=\"pl-c1\">==</span> <span class=\"pl-s\">\"__main__\"</span>:\n    <span class=\"pl-s1\">img</span> <span class=\"pl-c1\">=</span> [[<span class=\"pl-c1\">100</span>,<span class=\"pl-c1\">200</span>,<span class=\"pl-c1\">100</span>],[<span class=\"pl-c1\">200</span>,<span class=\"pl-c1\">50</span>,<span class=\"pl-c1\">200</span>],[<span class=\"pl-c1\">100</span>,<span class=\"pl-c1\">200</span>,<span class=\"pl-c1\">100</span>]]\n    <span class=\"pl-s1\">ans</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">Solution</span>().<span class=\"pl-c1\">imageSmoother</span>(<span class=\"pl-s1\">img</span>)\n    <span class=\"pl-en\">print</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\n</span>output:\"</span>, <span class=\"pl-en\">serialize</span>(<span class=\"pl-s1\">ans</span>, <span class=\"pl-s\">\"integer[][]\"</span>))</pre></div>\n",
    "created": "2024-12-30T12:08:40+00:00",
    "created_utc": "2024-12-30T12:08:40+00:00",
    "updated": "2024-12-30T12:08:40+00:00",
    "updated_utc": "2024-12-30T12:08:40+00:00"
  }
}
