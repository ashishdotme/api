{
  "locations": [
    {
      "id": 4702,
      "batteryState": "charging",
      "coordinates": "{\"-6.2263197\",\"53.2629535\"}",
      "batteryLevel": 25,
      "timestamp": "2024-12-15T13:22:46.000Z",
      "createdAt": "2024-12-15T13:22:48.017Z",
      "updatedAt": "2024-12-15T13:22:48.017Z"
    }
  ],
  "steps": [
    {
      "id": 8768,
      "stepCount": 5995,
      "date": "12/19/24",
      "fullDate": "2024-12-19T00:00:00.000Z",
      "createdAt": "2024-12-20T02:24:21.813Z",
      "updatedAt": "2024-12-20T02:24:21.813Z"
    }
  ],
  "sleep": [
    {
      "id": 223,
      "sleep": "0.9",
      "date": "12/15/24",
      "fullDate": "2024-12-15T00:00:00.000Z",
      "sleepStart": "2024-12-15T01:44:00.000Z",
      "sleepEnd": "2024-12-15T02:34:59.000Z",
      "createdAt": "2024-12-16T12:53:32.713Z",
      "updatedAt": "2024-12-16T12:53:32.713Z"
    }
  ],
  "word": [
    {
      "id": 1,
      "word": "clandestine",
      "meaning": "characterized by, done in, or executed with secrecy or concealment, especially for purposes of subversion or deception; private or surreptitious",
      "pronounciation": "klan-des-tin",
      "sentences": "Their clandestine meetings went undiscovered for two years.",
      "createdAt": "2022-01-24T19:45:33.772Z",
      "updatedAt": "2022-01-24T19:45:33.772Z"
    }
  ],
  "quote": [
    {
      "id": 1,
      "quote": "Kindness is the language which the deaf can hear and the blind can see",
      "category": "Motivational",
      "author": "Mark Twain",
      "createdAt": "2024-10-21T22:28:52.934Z",
      "updatedAt": "2024-10-21T22:28:52.934Z"
    }
  ],
  "shows": [
    {
      "id": 22,
      "title": "Peep Show Season 9",
      "language": "English",
      "showName": "Peep Show",
      "description": "Mark and Jez are a couple of twenty-something roommates who have nothing in common - except for the fact that their lives are anything but normal. Mayhem ensues as the pair strive to cope with day-to-day life.",
      "seasonNumber": 9,
      "year": 2003,
      "genre": "Comedy",
      "startedDate": "2022-01-31T00:00:00.000Z",
      "completedDate": null,
      "status": "Started",
      "loved": true,
      "imdbRating": "8.6",
      "imdbId": "tt0387764",
      "createdAt": "2022-02-01T01:30:32.275Z",
      "updatedAt": "2022-02-01T01:30:32.275Z"
    }
  ],
  "books": [
    {
      "id": 11,
      "title": "Atomic Habits",
      "author": " James Clear",
      "poster": "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1655988385i/40121378.jpg",
      "description": "No matter your goals, Atomic Habits offers a proven framework for improving—every day. James Clear, one of the world's leading experts on habit formation, reveals practical strategies that will teach you exactly how to form good habits, break bad ones, and master the tiny behaviors that lead to remarkable results.",
      "notes": "Atomic Habits",
      "year": 2018,
      "genre": "Personal Development",
      "completedDate": "2023-02-08T00:00:00.000Z",
      "loved": true,
      "createdAt": "2024-10-22T14:53:34.755Z",
      "updatedAt": "2024-10-22T14:53:34.755Z"
    }
  ],
  "courses": [
    {
      "id": 2,
      "title": "MERN Stack Front To Back: Full Stack React, Redux & Node.js",
      "description": "Build and deploy a social network with Node.js, Express, React, Redux & MongoDB",
      "author": "Brad Traversy",
      "category": "React",
      "notes": "NA",
      "completedDate": "2019-01-02T00:00:00.000Z",
      "platform": "Udemy",
      "createdAt": "2022-01-21T03:28:37.957Z",
      "updatedAt": "2022-01-21T03:28:37.957Z"
    }
  ],
  "movies": [
    {
      "id": 166,
      "title": "The Exorcist",
      "description": "When a mysterious entity possesses a young girl, her mother seeks the help of two Catholic priests to save her life.",
      "review": null,
      "language": "English",
      "year": 1973,
      "genre": "Horror",
      "viewingDate": "2024-12-02T04:53:18.239Z",
      "loved": true,
      "imdbRating": "8.1",
      "imdbId": "tt0070047",
      "createdAt": "2024-12-02T14:59:17.397Z",
      "updatedAt": "2024-12-02T14:59:17.397Z"
    }
  ],
  "tasks": [
    {
      "id": 565,
      "content": "Organize photos",
      "category": "Now",
      "projectId": "671d02e0eba7b8000000022f",
      "todoId": "672f928deba7b80000000208",
      "completed": false,
      "completedDate": null,
      "dueDate": "2024-11-09T16:49:52.410Z",
      "createdAt": "2024-11-09T16:49:52.411Z",
      "updatedAt": "2024-11-09T16:49:52.411Z"
    },
    {
      "id": 568,
      "content": "Solve Leetcode 3349",
      "category": "Now",
      "projectId": "671d02e0eba7b8000000022f",
      "todoId": "6733eafdeba7b80000000355",
      "completed": false,
      "completedDate": null,
      "dueDate": "2024-11-12T23:56:27.047Z",
      "createdAt": "2024-11-12T23:56:27.048Z",
      "updatedAt": "2024-11-12T23:56:27.048Z"
    }
  ],
  "updates": [
    {
      "id": 11,
      "category": "Life",
      "content": null,
      "title": "Moved to Dublin, Ireland",
      "date": "2021-09-13T10:29:42.297Z",
      "createdAt": "2024-09-15T13:36:36.858Z",
      "updatedAt": "2024-09-15T13:36:36.858Z"
    },
    {
      "id": 10,
      "category": "Life",
      "content": null,
      "title": "Started job at Honeywell, India",
      "date": "2020-10-12T10:29:42.297Z",
      "createdAt": "2024-09-15T13:32:54.840Z",
      "updatedAt": "2024-09-15T13:32:54.840Z"
    },
    {
      "id": 9,
      "category": "Life",
      "content": null,
      "title": "Started job at Amdocs, India",
      "date": "2019-01-19T10:29:42.297Z",
      "createdAt": "2024-09-15T13:28:28.681Z",
      "updatedAt": "2024-09-15T13:33:11.559Z"
    },
    {
      "id": 8,
      "category": "Life",
      "content": null,
      "title": "Started job at Nitor Infotech",
      "date": "2016-06-27T10:29:42.000Z",
      "createdAt": "2024-09-15T13:27:56.348Z",
      "updatedAt": "2024-09-15T13:35:21.819Z"
    },
    {
      "id": 7,
      "category": "Life",
      "content": null,
      "title": "Moved to Pune, India",
      "date": "2016-06-17T10:29:42.000Z",
      "createdAt": "2024-09-15T13:22:04.990Z",
      "updatedAt": "2024-09-15T13:35:34.498Z"
    },
    {
      "id": 6,
      "category": "Life",
      "content": null,
      "title": "Graduated in Computer Science and Engineering from Nagpur University, India",
      "date": "2016-05-30T10:29:42.297Z",
      "createdAt": "2024-09-15T13:21:23.009Z",
      "updatedAt": "2024-09-15T13:32:38.727Z"
    },
    {
      "id": 5,
      "category": "Life",
      "content": null,
      "title": "Born in Chhattisgarh, India",
      "date": "1993-06-04T10:29:42.297Z",
      "createdAt": "2024-09-15T13:19:16.078Z",
      "updatedAt": "2024-09-15T13:19:16.078Z"
    }
  ],
  "listens": [
    {
      "id": 1222,
      "title": "Pasoori",
      "artist": "Shae Gill",
      "album": "Pasoori",
      "releaseYear": null,
      "genre": null,
      "listenDate": "2024-12-19T15:49:19.000Z",
      "trackNumber": null,
      "createdAt": "2024-12-19T15:49:20.469Z",
      "updatedAt": "2024-12-19T15:49:20.469Z"
    }
  ],
  "github": {
    "lastCommit": "2024-12-17T15:19:58Z",
    "recentRepos": [
      {
        "name": "leetcode-python",
        "pushedAt": "2024-12-17T15:19:59Z"
      },
      {
        "name": "omakub",
        "pushedAt": "2024-12-16T20:11:21Z"
      },
      {
        "name": "books.ashish.me",
        "pushedAt": "2024-12-05T23:03:00Z"
      },
      {
        "name": "shows.ashish.me",
        "pushedAt": "2024-12-05T23:01:49Z"
      },
      {
        "name": "movies.ashish.me",
        "pushedAt": "2024-12-05T23:00:50Z"
      },
      {
        "name": "wiki.ashish.me",
        "pushedAt": "2024-11-20T00:13:30Z"
      },
      {
        "name": "dotfiles",
        "pushedAt": "2024-11-19T23:35:30Z"
      },
      {
        "name": "cli",
        "pushedAt": "2024-11-11T22:05:56Z"
      },
      {
        "name": "blog",
        "pushedAt": "2024-11-11T15:34:12Z"
      },
      {
        "name": "workers",
        "pushedAt": "2024-11-10T10:49:26Z"
      },
      {
        "name": "ashishdotme-utils",
        "pushedAt": "2024-11-09T00:31:07Z"
      },
      {
        "name": "npm-library-starter",
        "pushedAt": "2024-11-08T23:32:13Z"
      },
      {
        "name": "task-tracker",
        "pushedAt": "2024-11-08T23:08:27Z"
      },
      {
        "name": "jobsapi.ashish.me",
        "pushedAt": "2024-11-05T23:21:30Z"
      },
      {
        "name": "dashy",
        "pushedAt": "2024-10-16T17:47:56Z"
      },
      {
        "name": "dashboard.ashish.me",
        "pushedAt": "2024-09-14T17:51:29Z"
      }
    ]
  },
  "lastLeetcode": {
    "path": "Array_Easy_0506-relative-ranks_solution.py",
    "title": "solution.py",
    "body": "```python  \n# Created by Ashish Patel at 2024/12/16 15:44\n# leetgo: 1.4.11\n# https://leetcode.com/problems/relative-ranks/\n\n\"\"\"\n506. Relative Ranks (Easy)\nYou are given an integer array score of size n, where score[i] is the score of the iᵗʰ\nathlete in a competition. All the scores are guaranteed to be **unique**.\n\nThe athletes are **placed** based on their scores, where the 1ˢᵗ place athlete has the highest\nscore, the 2ⁿᵈ place athlete has the 2ⁿᵈ highest score, and so on. The placement of each athlete\ndetermines their rank:\n\n- The 1ˢᵗ place athlete's rank is \"Gold Medal\".\n- The 2ⁿᵈ place athlete's rank is \"Silver Medal\".\n- The 3ʳᵈ place athlete's rank is \"Bronze Medal\".\n- For the 4ᵗʰ place to the nᵗʰ place athlete, their rank is their placement number (i.e., the\nxᵗʰ place athlete's rank is \"x\").\n\nReturn an array answer of size n where answer[i] is the **rank** of the iᵗʰ athlete.\n\n**Example 1:**\n\n\nInput: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1ˢᵗ, 2ⁿᵈ, 3ʳᵈ, 4ᵗʰ, 5ᵗʰ].\n\n\n**Example 2:**\n\n\nInput: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1ˢᵗ, 5ᵗʰ, 3ʳᵈ, 2ⁿᵈ, 4ᵗʰ].\n\n\n**Constraints:**\n\n- n == score.length\n- 1 <= n <= 10⁴\n- 0 <= score[i] <= 10⁶\n- All the values in score are **unique**.\n\n\"\"\"\n\nfrom typing import *\nfrom leetgo_py import *\n\nimport bisect\nimport collections \nimport functools\nimport heapq \nimport itertools \nimport operator\nimport math \nimport string\nimport leetcode as lc\n\n# @lc code=begin\n\nclass Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:\n        sorted_score = sorted(score, reverse=True)\n        medals = [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"]\n        mappings = {}\n        for i in range(len(sorted_score)):\n            if i < 3:\n                mappings[sorted_score[i]] = medals[i]\n            else:\n                mappings[sorted_score[i]] = i+1\n        result = [0] * len(score)\n        for i in range(len(score)):\n            result[i] = str(mappings[score[i]]) \n        return result\n            \n\n# @lc code=end\n\nif __name__ == \"__main__\":\n    score = [10,3,8,9,4]\n    ans = Solution().findRelativeRanks(score)\n    print(\"\\noutput:\", serialize(ans, \"string[]\"))\n```",
    "topic1": "Array",
    "topic2": "Easy",
    "topic3": "0506-relative-ranks",
    "url": "https://github.com/ashishdotme/leetcode-python/blob/master/Array/Easy/0506-relative-ranks/solution.py",
    "slug": "solution",
    "html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"># Created by Ashish Patel at 2024/12/16 15:44</span>\n<span class=\"pl-c\"># leetgo: 1.4.11</span>\n<span class=\"pl-c\"># https://leetcode.com/problems/relative-ranks/</span>\n\n<span class=\"pl-s\">\"\"\"</span>\n<span class=\"pl-s\">506. Relative Ranks (Easy)</span>\n<span class=\"pl-s\">You are given an integer array score of size n, where score[i] is the score of the iᵗʰ</span>\n<span class=\"pl-s\">athlete in a competition. All the scores are guaranteed to be **unique**.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">The athletes are **placed** based on their scores, where the 1ˢᵗ place athlete has the highest</span>\n<span class=\"pl-s\">score, the 2ⁿᵈ place athlete has the 2ⁿᵈ highest score, and so on. The placement of each athlete</span>\n<span class=\"pl-s\">determines their rank:</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">- The 1ˢᵗ place athlete's rank is \"Gold Medal\".</span>\n<span class=\"pl-s\">- The 2ⁿᵈ place athlete's rank is \"Silver Medal\".</span>\n<span class=\"pl-s\">- The 3ʳᵈ place athlete's rank is \"Bronze Medal\".</span>\n<span class=\"pl-s\">- For the 4ᵗʰ place to the nᵗʰ place athlete, their rank is their placement number (i.e., the</span>\n<span class=\"pl-s\">xᵗʰ place athlete's rank is \"x\").</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Return an array answer of size n where answer[i] is the **rank** of the iᵗʰ athlete.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Example 1:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Input: score = [5,4,3,2,1]</span>\n<span class=\"pl-s\">Output: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]</span>\n<span class=\"pl-s\">Explanation: The placements are [1ˢᵗ, 2ⁿᵈ, 3ʳᵈ, 4ᵗʰ, 5ᵗʰ].</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Example 2:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Input: score = [10,3,8,9,4]</span>\n<span class=\"pl-s\">Output: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]</span>\n<span class=\"pl-s\">Explanation: The placements are [1ˢᵗ, 5ᵗʰ, 3ʳᵈ, 2ⁿᵈ, 4ᵗʰ].</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Constraints:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">- n == score.length</span>\n<span class=\"pl-s\">- 1 &lt;= n &lt;= 10⁴</span>\n<span class=\"pl-s\">- 0 &lt;= score[i] &lt;= 10⁶</span>\n<span class=\"pl-s\">- All the values in score are **unique**.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">\"\"\"</span>\n\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">typing</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">leetgo_py</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">bisect</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">collections</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">functools</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">heapq</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">itertools</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">operator</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">math</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">string</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">leetcode</span> <span class=\"pl-k\">as</span> <span class=\"pl-s1\">lc</span>\n\n<span class=\"pl-c\"># @lc code=begin</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Solution</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">findRelativeRanks</span>(<span class=\"pl-s1\">self</span>, <span class=\"pl-s1\">score</span>: <span class=\"pl-v\">List</span>[<span class=\"pl-smi\">int</span>]) <span class=\"pl-c1\">-&gt;</span> <span class=\"pl-v\">List</span>[<span class=\"pl-smi\">str</span>]:\n        <span class=\"pl-s1\">sorted_score</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">sorted</span>(<span class=\"pl-s1\">score</span>, <span class=\"pl-s1\">reverse</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">True</span>)\n        <span class=\"pl-s1\">medals</span> <span class=\"pl-c1\">=</span> [<span class=\"pl-s\">\"Gold Medal\"</span>, <span class=\"pl-s\">\"Silver Medal\"</span>, <span class=\"pl-s\">\"Bronze Medal\"</span>]\n        <span class=\"pl-s1\">mappings</span> <span class=\"pl-c1\">=</span> {}\n        <span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">in</span> <span class=\"pl-en\">range</span>(<span class=\"pl-en\">len</span>(<span class=\"pl-s1\">sorted_score</span>)):\n            <span class=\"pl-k\">if</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-c1\">3</span>:\n                <span class=\"pl-s1\">mappings</span>[<span class=\"pl-s1\">sorted_score</span>[<span class=\"pl-s1\">i</span>]] <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">medals</span>[<span class=\"pl-s1\">i</span>]\n            <span class=\"pl-k\">else</span>:\n                <span class=\"pl-s1\">mappings</span>[<span class=\"pl-s1\">sorted_score</span>[<span class=\"pl-s1\">i</span>]] <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">+</span><span class=\"pl-c1\">1</span>\n        <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> [<span class=\"pl-c1\">0</span>] <span class=\"pl-c1\">*</span> <span class=\"pl-en\">len</span>(<span class=\"pl-s1\">score</span>)\n        <span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">in</span> <span class=\"pl-en\">range</span>(<span class=\"pl-en\">len</span>(<span class=\"pl-s1\">score</span>)):\n            <span class=\"pl-s1\">result</span>[<span class=\"pl-s1\">i</span>] <span class=\"pl-c1\">=</span> <span class=\"pl-en\">str</span>(<span class=\"pl-s1\">mappings</span>[<span class=\"pl-s1\">score</span>[<span class=\"pl-s1\">i</span>]]) \n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span>\n            \n\n<span class=\"pl-c\"># @lc code=end</span>\n\n<span class=\"pl-k\">if</span> <span class=\"pl-s1\">__name__</span> <span class=\"pl-c1\">==</span> <span class=\"pl-s\">\"__main__\"</span>:\n    <span class=\"pl-s1\">score</span> <span class=\"pl-c1\">=</span> [<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">8</span>,<span class=\"pl-c1\">9</span>,<span class=\"pl-c1\">4</span>]\n    <span class=\"pl-s1\">ans</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">Solution</span>().<span class=\"pl-c1\">findRelativeRanks</span>(<span class=\"pl-s1\">score</span>)\n    <span class=\"pl-en\">print</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\n</span>output:\"</span>, <span class=\"pl-en\">serialize</span>(<span class=\"pl-s1\">ans</span>, <span class=\"pl-s\">\"string[]\"</span>))</pre></div>\n",
    "created": "2024-12-17T15:09:49+00:00",
    "created_utc": "2024-12-17T15:09:49+00:00",
    "updated": "2024-12-17T15:09:49+00:00",
    "updated_utc": "2024-12-17T15:09:49+00:00"
  }
}
