{
  "locations": [
    {
      "id": 4702,
      "batteryState": "charging",
      "coordinates": "{\"-6.2263197\",\"53.2629535\"}",
      "batteryLevel": 25,
      "timestamp": "2024-12-15T13:22:46.000Z",
      "createdAt": "2024-12-15T13:22:48.017Z",
      "updatedAt": "2024-12-15T13:22:48.017Z"
    }
  ],
  "steps": [
    {
      "id": 8855,
      "stepCount": 1238,
      "date": "12/27/24",
      "fullDate": "2024-12-27T00:00:00.000Z",
      "createdAt": "2024-12-28T10:51:41.182Z",
      "updatedAt": "2024-12-28T10:51:41.182Z"
    }
  ],
  "sleep": [
    {
      "id": 227,
      "sleep": "6.3",
      "date": "12/20/24",
      "fullDate": "2024-12-20T00:00:00.000Z",
      "sleepStart": "2024-12-20T02:36:00.000Z",
      "sleepEnd": "2024-12-20T08:31:59.000Z",
      "createdAt": "2024-12-21T01:07:24.195Z",
      "updatedAt": "2024-12-21T01:07:24.195Z"
    }
  ],
  "word": [
    {
      "id": 1,
      "word": "clandestine",
      "meaning": "characterized by, done in, or executed with secrecy or concealment, especially for purposes of subversion or deception; private or surreptitious",
      "pronounciation": "klan-des-tin",
      "sentences": "Their clandestine meetings went undiscovered for two years.",
      "createdAt": "2022-01-24T19:45:33.772Z",
      "updatedAt": "2022-01-24T19:45:33.772Z"
    }
  ],
  "quote": [
    {
      "id": 1,
      "quote": "Kindness is the language which the deaf can hear and the blind can see",
      "category": "Motivational",
      "author": "Mark Twain",
      "createdAt": "2024-10-21T22:28:52.934Z",
      "updatedAt": "2024-10-21T22:28:52.934Z"
    }
  ],
  "shows": [
    {
      "id": 22,
      "title": "Peep Show Season 9",
      "language": "English",
      "showName": "Peep Show",
      "description": "Mark and Jez are a couple of twenty-something roommates who have nothing in common - except for the fact that their lives are anything but normal. Mayhem ensues as the pair strive to cope with day-to-day life.",
      "seasonNumber": 9,
      "year": 2003,
      "genre": "Comedy",
      "startedDate": "2022-01-31T00:00:00.000Z",
      "completedDate": null,
      "status": "Started",
      "loved": true,
      "imdbRating": "8.6",
      "imdbId": "tt0387764",
      "createdAt": "2022-02-01T01:30:32.275Z",
      "updatedAt": "2022-02-01T01:30:32.275Z"
    }
  ],
  "books": [
    {
      "id": 11,
      "title": "Atomic Habits",
      "author": " James Clear",
      "poster": "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1655988385i/40121378.jpg",
      "description": "No matter your goals, Atomic Habits offers a proven framework for improvingâ€”every day. James Clear, one of the world's leading experts on habit formation, reveals practical strategies that will teach you exactly how to form good habits, break bad ones, and master the tiny behaviors that lead to remarkable results.",
      "notes": "Atomic Habits",
      "year": 2018,
      "genre": "Personal Development",
      "completedDate": "2023-02-08T00:00:00.000Z",
      "loved": true,
      "createdAt": "2024-10-22T14:53:34.755Z",
      "updatedAt": "2024-10-22T14:53:34.755Z"
    }
  ],
  "courses": [
    {
      "id": 2,
      "title": "MERN Stack Front To Back: Full Stack React, Redux & Node.js",
      "description": "Build and deploy a social network with Node.js, Express, React, Redux & MongoDB",
      "author": "Brad Traversy",
      "category": "React",
      "notes": "NA",
      "completedDate": "2019-01-02T00:00:00.000Z",
      "platform": "Udemy",
      "createdAt": "2022-01-21T03:28:37.957Z",
      "updatedAt": "2022-01-21T03:28:37.957Z"
    }
  ],
  "movies": [
    {
      "id": 166,
      "title": "The Exorcist",
      "description": "When a mysterious entity possesses a young girl, her mother seeks the help of two Catholic priests to save her life.",
      "review": null,
      "language": "English",
      "year": 1973,
      "genre": "Horror",
      "viewingDate": "2024-12-02T04:53:18.239Z",
      "loved": true,
      "imdbRating": "8.1",
      "imdbId": "tt0070047",
      "createdAt": "2024-12-02T14:59:17.397Z",
      "updatedAt": "2024-12-02T14:59:17.397Z"
    }
  ],
  "tasks": [],
  "updates": [
    {
      "id": 11,
      "category": "Life",
      "content": null,
      "title": "Moved to Dublin, Ireland",
      "date": "2021-09-13T10:29:42.297Z",
      "createdAt": "2024-09-15T13:36:36.858Z",
      "updatedAt": "2024-09-15T13:36:36.858Z"
    },
    {
      "id": 10,
      "category": "Life",
      "content": null,
      "title": "Started job at Honeywell, India",
      "date": "2020-10-12T10:29:42.297Z",
      "createdAt": "2024-09-15T13:32:54.840Z",
      "updatedAt": "2024-09-15T13:32:54.840Z"
    },
    {
      "id": 9,
      "category": "Life",
      "content": null,
      "title": "Started job at Amdocs, India",
      "date": "2019-01-19T10:29:42.297Z",
      "createdAt": "2024-09-15T13:28:28.681Z",
      "updatedAt": "2024-09-15T13:33:11.559Z"
    },
    {
      "id": 8,
      "category": "Life",
      "content": null,
      "title": "Started job at Nitor Infotech",
      "date": "2016-06-27T10:29:42.000Z",
      "createdAt": "2024-09-15T13:27:56.348Z",
      "updatedAt": "2024-09-15T13:35:21.819Z"
    },
    {
      "id": 7,
      "category": "Life",
      "content": null,
      "title": "Moved to Pune, India",
      "date": "2016-06-17T10:29:42.000Z",
      "createdAt": "2024-09-15T13:22:04.990Z",
      "updatedAt": "2024-09-15T13:35:34.498Z"
    },
    {
      "id": 6,
      "category": "Life",
      "content": null,
      "title": "Graduated in Computer Science and Engineering from Nagpur University, India",
      "date": "2016-05-30T10:29:42.297Z",
      "createdAt": "2024-09-15T13:21:23.009Z",
      "updatedAt": "2024-09-15T13:32:38.727Z"
    },
    {
      "id": 5,
      "category": "Life",
      "content": null,
      "title": "Born in Chhattisgarh, India",
      "date": "1993-06-04T10:29:42.297Z",
      "createdAt": "2024-09-15T13:19:16.078Z",
      "updatedAt": "2024-09-15T13:19:16.078Z"
    }
  ],
  "listens": [
    {
      "id": 1233,
      "title": "Kya Yahi Pyar Hai - From \"Rocky\"",
      "artist": "Lata Mangeshkar",
      "album": "Old Bollywood Duets",
      "releaseYear": null,
      "genre": null,
      "listenDate": "2024-12-29T05:09:19.000Z",
      "trackNumber": null,
      "createdAt": "2024-12-29T05:09:20.831Z",
      "updatedAt": "2024-12-29T05:09:20.831Z"
    }
  ],
  "github": {
    "lastCommit": "2024-12-28T14:27:17Z",
    "recentRepos": [
      {
        "name": "leetcode-python",
        "pushedAt": "2024-12-28T14:27:18Z"
      },
      {
        "name": "omakub",
        "pushedAt": "2024-12-16T20:11:21Z"
      },
      {
        "name": "books.ashish.me",
        "pushedAt": "2024-12-05T23:03:00Z"
      },
      {
        "name": "shows.ashish.me",
        "pushedAt": "2024-12-05T23:01:49Z"
      },
      {
        "name": "movies.ashish.me",
        "pushedAt": "2024-12-05T23:00:50Z"
      },
      {
        "name": "wiki.ashish.me",
        "pushedAt": "2024-11-20T00:13:30Z"
      },
      {
        "name": "dotfiles",
        "pushedAt": "2024-11-19T23:35:30Z"
      },
      {
        "name": "cli",
        "pushedAt": "2024-11-11T22:05:56Z"
      },
      {
        "name": "blog",
        "pushedAt": "2024-11-11T15:34:12Z"
      },
      {
        "name": "workers",
        "pushedAt": "2024-11-10T10:49:26Z"
      },
      {
        "name": "ashishdotme-utils",
        "pushedAt": "2024-11-09T00:31:07Z"
      },
      {
        "name": "npm-library-starter",
        "pushedAt": "2024-11-08T23:32:13Z"
      },
      {
        "name": "task-tracker",
        "pushedAt": "2024-11-08T23:08:27Z"
      },
      {
        "name": "jobsapi.ashish.me",
        "pushedAt": "2024-11-05T23:21:30Z"
      },
      {
        "name": "dashy",
        "pushedAt": "2024-10-16T17:47:56Z"
      },
      {
        "name": "dashboard.ashish.me",
        "pushedAt": "2024-09-14T17:51:29Z"
      }
    ]
  },
  "lastLeetcode": {
    "path": "Array_Easy_1816-truncate-sentence_solution.py",
    "title": "solution.py",
    "body": "```python  \n# Created by Ashish Patel at 2024/12/26 19:22\n# leetgo: 1.4.11\n# https://leetcode.com/problems/truncate-sentence/\n\n\"\"\"\n1816. Truncate Sentence (Easy)\nA **sentence** is a list of words that are separated by a single space with no leading or trailing\nspaces. Each of the words consists of **only** uppercase and lowercase English letters (no\npunctuation).\n\n- For example, \"Hello World\", \"HELLO\", and \"hello world hello world\" are all sentences.\n\nYou are given a sentence s  and an integer k . You want to **truncate** s  such that it\ncontains only the **first** k  words. Return s  after **truncating** it.\n\n**Example 1:**\n\n\nInput: s = \"Hello how are you Contestant\", k = 4\nOutput: \"Hello how are you\"\nExplanation:\nThe words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].\nThe first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].\nHence, you should return \"Hello how are you\".\n\n\n**Example 2:**\n\n\nInput: s = \"What is the solution to this problem\", k = 4\nOutput: \"What is the solution\"\nExplanation:\nThe words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].\nThe first 4 words are [\"What\", \"is\", \"the\", \"solution\"].\nHence, you should return \"What is the solution\".\n\n\n**Example 3:**\n\n\nInput: s = \"chopper is not a tanuki\", k = 5\nOutput: \"chopper is not a tanuki\"\n\n\n**Constraints:**\n\n- 1 <= s.length <= 500\n- k is in the range [1, the number of words in s].\n- s consist of only lowercase and uppercase English letters and spaces.\n- The words in s are separated by a single space.\n- There are no leading or trailing spaces.\n\n\"\"\"\n\nfrom typing import *\nfrom leetgo_py import *\n\nimport bisect\nimport collections \nimport functools\nimport heapq \nimport itertools \nimport operator\nimport math \nimport string\n\n# @lc code=begin\n\nclass Solution:\n    def truncateSentence(self, s: str, k: int) -> str:\n        result = []\n        arr = s.split(\" \")\n        for i in range(k):\n            result.append(arr[i])\n        return ' '.join(result)\n\n# @lc code=end\n\nif __name__ == \"__main__\":\n    s = \"Hello how are you Contestant\"\n    k = 4\n    ans = Solution().truncateSentence(s, k)\n    print(\"\\noutput:\", serialize(ans, \"string\"))\n```",
    "topic1": "Array",
    "topic2": "Easy",
    "topic3": "1816-truncate-sentence",
    "url": "https://github.com/ashishdotme/leetcode-python/blob/master/Array/Easy/1816-truncate-sentence/solution.py",
    "slug": "solution",
    "html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"># Created by Ashish Patel at 2024/12/26 19:22</span>\n<span class=\"pl-c\"># leetgo: 1.4.11</span>\n<span class=\"pl-c\"># https://leetcode.com/problems/truncate-sentence/</span>\n\n<span class=\"pl-s\">\"\"\"</span>\n<span class=\"pl-s\">1816. Truncate Sentence (Easy)</span>\n<span class=\"pl-s\">A **sentence** is a list of words that are separated by a single space with no leading or trailing</span>\n<span class=\"pl-s\">spaces. Each of the words consists of **only** uppercase and lowercase English letters (no</span>\n<span class=\"pl-s\">punctuation).</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">- For example, \"Hello World\", \"HELLO\", and \"hello world hello world\" are all sentences.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">You are given a sentence s  and an integer k . You want to **truncate** s  such that it</span>\n<span class=\"pl-s\">contains only the **first** k  words. Return s  after **truncating** it.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Example 1:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Input: s = \"Hello how are you Contestant\", k = 4</span>\n<span class=\"pl-s\">Output: \"Hello how are you\"</span>\n<span class=\"pl-s\">Explanation:</span>\n<span class=\"pl-s\">The words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].</span>\n<span class=\"pl-s\">The first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].</span>\n<span class=\"pl-s\">Hence, you should return \"Hello how are you\".</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Example 2:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Input: s = \"What is the solution to this problem\", k = 4</span>\n<span class=\"pl-s\">Output: \"What is the solution\"</span>\n<span class=\"pl-s\">Explanation:</span>\n<span class=\"pl-s\">The words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].</span>\n<span class=\"pl-s\">The first 4 words are [\"What\", \"is\", \"the\", \"solution\"].</span>\n<span class=\"pl-s\">Hence, you should return \"What is the solution\".</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Example 3:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Input: s = \"chopper is not a tanuki\", k = 5</span>\n<span class=\"pl-s\">Output: \"chopper is not a tanuki\"</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Constraints:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">- 1 &lt;= s.length &lt;= 500</span>\n<span class=\"pl-s\">- k is in the range [1, the number of words in s].</span>\n<span class=\"pl-s\">- s consist of only lowercase and uppercase English letters and spaces.</span>\n<span class=\"pl-s\">- The words in s are separated by a single space.</span>\n<span class=\"pl-s\">- There are no leading or trailing spaces.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">\"\"\"</span>\n\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">typing</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">leetgo_py</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">bisect</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">collections</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">functools</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">heapq</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">itertools</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">operator</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">math</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">string</span>\n\n<span class=\"pl-c\"># @lc code=begin</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Solution</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">truncateSentence</span>(<span class=\"pl-s1\">self</span>, <span class=\"pl-s1\">s</span>: <span class=\"pl-smi\">str</span>, <span class=\"pl-s1\">k</span>: <span class=\"pl-smi\">int</span>) <span class=\"pl-c1\">-&gt;</span> <span class=\"pl-smi\">str</span>:\n        <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> []\n        <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s</span>.<span class=\"pl-c1\">split</span>(<span class=\"pl-s\">\" \"</span>)\n        <span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">in</span> <span class=\"pl-en\">range</span>(<span class=\"pl-s1\">k</span>):\n            <span class=\"pl-s1\">result</span>.<span class=\"pl-c1\">append</span>(<span class=\"pl-s1\">arr</span>[<span class=\"pl-s1\">i</span>])\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\">' '</span>.<span class=\"pl-c1\">join</span>(<span class=\"pl-s1\">result</span>)\n\n<span class=\"pl-c\"># @lc code=end</span>\n\n<span class=\"pl-k\">if</span> <span class=\"pl-s1\">__name__</span> <span class=\"pl-c1\">==</span> <span class=\"pl-s\">\"__main__\"</span>:\n    <span class=\"pl-s1\">s</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"Hello how are you Contestant\"</span>\n    <span class=\"pl-s1\">k</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">4</span>\n    <span class=\"pl-s1\">ans</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">Solution</span>().<span class=\"pl-c1\">truncateSentence</span>(<span class=\"pl-s1\">s</span>, <span class=\"pl-s1\">k</span>)\n    <span class=\"pl-en\">print</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\n</span>output:\"</span>, <span class=\"pl-en\">serialize</span>(<span class=\"pl-s1\">ans</span>, <span class=\"pl-s\">\"string\"</span>))</pre></div>\n",
    "created": "2024-12-28T14:26:46+00:00",
    "created_utc": "2024-12-28T14:26:46+00:00",
    "updated": "2024-12-28T14:26:46+00:00",
    "updated_utc": "2024-12-28T14:26:46+00:00"
  }
}
