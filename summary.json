{
  "locations": [
    {
      "id": 4702,
      "batteryState": "charging",
      "coordinates": "{\"-6.2263197\",\"53.2629535\"}",
      "batteryLevel": 25,
      "timestamp": "2024-12-15T13:22:46.000Z",
      "createdAt": "2024-12-15T13:22:48.017Z",
      "updatedAt": "2024-12-15T13:22:48.017Z"
    }
  ],
  "steps": [
    {
      "id": 8873,
      "stepCount": 9562,
      "date": "12/31/24",
      "fullDate": "2024-12-31T00:00:00.000Z",
      "createdAt": "2025-01-01T22:07:15.717Z",
      "updatedAt": "2025-01-01T22:07:15.717Z"
    }
  ],
  "sleep": [
    {
      "id": 227,
      "sleep": "6.3",
      "date": "12/20/24",
      "fullDate": "2024-12-20T00:00:00.000Z",
      "sleepStart": "2024-12-20T02:36:00.000Z",
      "sleepEnd": "2024-12-20T08:31:59.000Z",
      "createdAt": "2024-12-21T01:07:24.195Z",
      "updatedAt": "2024-12-21T01:07:24.195Z"
    }
  ],
  "word": [
    {
      "id": 1,
      "word": "clandestine",
      "meaning": "characterized by, done in, or executed with secrecy or concealment, especially for purposes of subversion or deception; private or surreptitious",
      "pronounciation": "klan-des-tin",
      "sentences": "Their clandestine meetings went undiscovered for two years.",
      "createdAt": "2022-01-24T19:45:33.772Z",
      "updatedAt": "2022-01-24T19:45:33.772Z"
    }
  ],
  "quote": [
    {
      "id": 2,
      "quote": "If something upsets you, it is not that thing, but your judgement of it, that causes you distress. And that judgement is in your power",
      "category": "Motivational",
      "author": "Marcus Aurelius",
      "createdAt": "2024-10-21T22:30:21.598Z",
      "updatedAt": "2024-10-21T22:30:21.598Z"
    }
  ],
  "shows": [
    {
      "id": 22,
      "title": "Peep Show Season 9",
      "language": "English",
      "showName": "Peep Show",
      "description": "Mark and Jez are a couple of twenty-something roommates who have nothing in common - except for the fact that their lives are anything but normal. Mayhem ensues as the pair strive to cope with day-to-day life.",
      "seasonNumber": 9,
      "year": 2003,
      "genre": "Comedy",
      "startedDate": "2022-01-31T00:00:00.000Z",
      "completedDate": null,
      "status": "Started",
      "loved": true,
      "imdbRating": "8.6",
      "imdbId": "tt0387764",
      "createdAt": "2022-02-01T01:30:32.275Z",
      "updatedAt": "2022-02-01T01:30:32.275Z"
    }
  ],
  "books": [
    {
      "id": 11,
      "title": "Atomic Habits",
      "author": " James Clear",
      "poster": "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1655988385i/40121378.jpg",
      "description": "No matter your goals, Atomic Habits offers a proven framework for improvingâ€”every day. James Clear, one of the world's leading experts on habit formation, reveals practical strategies that will teach you exactly how to form good habits, break bad ones, and master the tiny behaviors that lead to remarkable results.",
      "notes": "Atomic Habits",
      "year": 2018,
      "genre": "Personal Development",
      "completedDate": "2023-02-08T00:00:00.000Z",
      "loved": true,
      "createdAt": "2024-10-22T14:53:34.755Z",
      "updatedAt": "2024-10-22T14:53:34.755Z"
    }
  ],
  "courses": [
    {
      "id": 2,
      "title": "MERN Stack Front To Back: Full Stack React, Redux & Node.js",
      "description": "Build and deploy a social network with Node.js, Express, React, Redux & MongoDB",
      "author": "Brad Traversy",
      "category": "React",
      "notes": "NA",
      "completedDate": "2019-01-02T00:00:00.000Z",
      "platform": "Udemy",
      "createdAt": "2022-01-21T03:28:37.957Z",
      "updatedAt": "2022-01-21T03:28:37.957Z"
    }
  ],
  "movies": [
    {
      "id": 166,
      "title": "The Exorcist",
      "description": "When a mysterious entity possesses a young girl, her mother seeks the help of two Catholic priests to save her life.",
      "review": null,
      "language": "English",
      "year": 1973,
      "genre": "Horror",
      "viewingDate": "2024-12-02T04:53:18.239Z",
      "loved": true,
      "imdbRating": "8.1",
      "imdbId": "tt0070047",
      "createdAt": "2024-12-02T14:59:17.397Z",
      "updatedAt": "2024-12-02T14:59:17.397Z"
    }
  ],
  "tasks": [],
  "updates": [
    {
      "id": 11,
      "category": "Life",
      "content": null,
      "title": "Moved to Dublin, Ireland",
      "date": "2021-09-13T10:29:42.297Z",
      "createdAt": "2024-09-15T13:36:36.858Z",
      "updatedAt": "2024-09-15T13:36:36.858Z"
    },
    {
      "id": 10,
      "category": "Life",
      "content": null,
      "title": "Started job at Honeywell, India",
      "date": "2020-10-12T10:29:42.297Z",
      "createdAt": "2024-09-15T13:32:54.840Z",
      "updatedAt": "2024-09-15T13:32:54.840Z"
    },
    {
      "id": 9,
      "category": "Life",
      "content": null,
      "title": "Started job at Amdocs, India",
      "date": "2019-01-19T10:29:42.297Z",
      "createdAt": "2024-09-15T13:28:28.681Z",
      "updatedAt": "2024-09-15T13:33:11.559Z"
    },
    {
      "id": 8,
      "category": "Life",
      "content": null,
      "title": "Started job at Nitor Infotech",
      "date": "2016-06-27T10:29:42.000Z",
      "createdAt": "2024-09-15T13:27:56.348Z",
      "updatedAt": "2024-09-15T13:35:21.819Z"
    },
    {
      "id": 7,
      "category": "Life",
      "content": null,
      "title": "Moved to Pune, India",
      "date": "2016-06-17T10:29:42.000Z",
      "createdAt": "2024-09-15T13:22:04.990Z",
      "updatedAt": "2024-09-15T13:35:34.498Z"
    },
    {
      "id": 6,
      "category": "Life",
      "content": null,
      "title": "Graduated in Computer Science and Engineering from Nagpur University, India",
      "date": "2016-05-30T10:29:42.297Z",
      "createdAt": "2024-09-15T13:21:23.009Z",
      "updatedAt": "2024-09-15T13:32:38.727Z"
    },
    {
      "id": 5,
      "category": "Life",
      "content": null,
      "title": "Born in Chhattisgarh, India",
      "date": "1993-06-04T10:29:42.297Z",
      "createdAt": "2024-09-15T13:19:16.078Z",
      "updatedAt": "2024-09-15T13:19:16.078Z"
    }
  ],
  "listens": [
    {
      "id": 1263,
      "title": "Raanjhan (From \"Do Patti\")",
      "artist": "Sachet-Parampara",
      "album": "Raanjhan (From \"Do Patti\")",
      "releaseYear": null,
      "genre": null,
      "listenDate": "2024-12-31T10:56:42.000Z",
      "trackNumber": null,
      "createdAt": "2024-12-31T10:56:43.315Z",
      "updatedAt": "2024-12-31T10:56:43.315Z"
    }
  ],
  "github": {
    "lastCommit": "2025-01-01T21:55:43Z",
    "recentRepos": [
      {
        "name": "leetcode-python",
        "pushedAt": "2025-01-01T21:55:44Z"
      },
      {
        "name": "omakub",
        "pushedAt": "2024-12-16T20:11:21Z"
      },
      {
        "name": "books.ashish.me",
        "pushedAt": "2024-12-05T23:03:00Z"
      },
      {
        "name": "shows.ashish.me",
        "pushedAt": "2024-12-05T23:01:49Z"
      },
      {
        "name": "movies.ashish.me",
        "pushedAt": "2024-12-05T23:00:50Z"
      },
      {
        "name": "wiki.ashish.me",
        "pushedAt": "2024-11-20T00:13:30Z"
      },
      {
        "name": "dotfiles",
        "pushedAt": "2024-11-19T23:35:30Z"
      },
      {
        "name": "cli",
        "pushedAt": "2024-11-11T22:05:56Z"
      },
      {
        "name": "blog",
        "pushedAt": "2024-11-11T15:34:12Z"
      },
      {
        "name": "workers",
        "pushedAt": "2024-11-10T10:49:26Z"
      },
      {
        "name": "ashishdotme-utils",
        "pushedAt": "2024-11-09T00:31:07Z"
      },
      {
        "name": "npm-library-starter",
        "pushedAt": "2024-11-08T23:32:13Z"
      },
      {
        "name": "task-tracker",
        "pushedAt": "2024-11-08T23:08:27Z"
      },
      {
        "name": "jobsapi.ashish.me",
        "pushedAt": "2024-11-05T23:21:30Z"
      },
      {
        "name": "dashy",
        "pushedAt": "2024-10-16T17:47:56Z"
      },
      {
        "name": "dashboard.ashish.me",
        "pushedAt": "2024-09-14T17:51:29Z"
      }
    ]
  },
  "lastLeetcode": {
    "path": "Array_Easy_0748-shortest-completing-word_solution.py",
    "title": "solution.py",
    "body": "```python  \n# Created by Ashish Patel at 2024/12/30 16:57\n# leetgo: 1.4.11\n# https://leetcode.com/problems/shortest-completing-word/\n\n\"\"\"\n748. Shortest Completing Word (Easy)\nGiven a string licensePlate and an array of strings words, find the **shortest completing** word\nin words.\n\nA **completing** word is a word that **contains all the letters** in licensePlate. **Ignore\nnumbers and spaces** in licensePlate, and treat letters as **case insensitive**. If a letter\nappears more than once in licensePlate, then it must appear in the word the same number of times\nor more.\n\nFor example, if licensePlate  = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring\ncase), and 'c' twice. Possible **completing** words are \"abccdef\", \"caaacab\", and \"cbca\".\n\nReturn the shortest **completing** word in  words. It is guaranteed an answer exists. If there are\nmultiple shortest **completing** words, return the **first** one that occurs in words.\n\n**Example 1:**\n\n\nInput: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]\nOutput: \"steps\"\nExplanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n\"step\" contains 't' and 'p', but only contains 1 's'.\n\"steps\" contains 't', 'p', and both 's' characters.\n\"stripe\" is missing an 's'.\n\"stepple\" is missing an 's'.\nSince \"steps\" is the only word containing all the letters, that is the answer.\n\n\n**Example 2:**\n\n\nInput: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]\nOutput: \"pest\"\nExplanation: licensePlate only contains the letter 's'. All the words contain 's', but among these\n\"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears\nearliest of the 3.\n\n\n**Constraints:**\n\n- 1 <= licensePlate.length <= 7\n- licensePlate contains digits, letters (uppercase or lowercase), or space ' '.\n- 1 <= words.length <= 1000\n- 1 <= words[i].length <= 15\n- words[i] consists of lower case English letters.\n\n\"\"\"\n\nfrom typing import *\nfrom leetgo_py import *\n\nimport bisect\nimport collections \nimport functools\nimport heapq \nimport itertools \nimport operator\nimport math \nimport string\nimport leetcode as lc\n\n# @lc code=begin\n\nclass Solution:\n    def shortestCompletingWord(self, licensePlate: str, words: List[str]) -> str:\n        for i in words:\n            print(i)\n\n# @lc code=end\n\nif __name__ == \"__main__\":\n    licensePlate = \"1s3 PSt\"\n    words = [\"step\",\"steps\",\"stripe\",\"stepple\"]\n    ans = Solution().shortestCompletingWord(licensePlate, words)\n    print(\"\\noutput:\", serialize(ans, \"string\"))\n```",
    "topic1": "Array",
    "topic2": "Easy",
    "topic3": "0748-shortest-completing-word",
    "url": "https://github.com/ashishdotme/leetcode-python/blob/master/Array/Easy/0748-shortest-completing-word/solution.py",
    "slug": "solution",
    "html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"># Created by Ashish Patel at 2024/12/30 16:57</span>\n<span class=\"pl-c\"># leetgo: 1.4.11</span>\n<span class=\"pl-c\"># https://leetcode.com/problems/shortest-completing-word/</span>\n\n<span class=\"pl-s\">\"\"\"</span>\n<span class=\"pl-s\">748. Shortest Completing Word (Easy)</span>\n<span class=\"pl-s\">Given a string licensePlate and an array of strings words, find the **shortest completing** word</span>\n<span class=\"pl-s\">in words.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">A **completing** word is a word that **contains all the letters** in licensePlate. **Ignore</span>\n<span class=\"pl-s\">numbers and spaces** in licensePlate, and treat letters as **case insensitive**. If a letter</span>\n<span class=\"pl-s\">appears more than once in licensePlate, then it must appear in the word the same number of times</span>\n<span class=\"pl-s\">or more.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">For example, if licensePlate  = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring</span>\n<span class=\"pl-s\">case), and 'c' twice. Possible **completing** words are \"abccdef\", \"caaacab\", and \"cbca\".</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Return the shortest **completing** word in  words. It is guaranteed an answer exists. If there are</span>\n<span class=\"pl-s\">multiple shortest **completing** words, return the **first** one that occurs in words.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Example 1:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Input: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]</span>\n<span class=\"pl-s\">Output: \"steps\"</span>\n<span class=\"pl-s\">Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.</span>\n<span class=\"pl-s\">\"step\" contains 't' and 'p', but only contains 1 's'.</span>\n<span class=\"pl-s\">\"steps\" contains 't', 'p', and both 's' characters.</span>\n<span class=\"pl-s\">\"stripe\" is missing an 's'.</span>\n<span class=\"pl-s\">\"stepple\" is missing an 's'.</span>\n<span class=\"pl-s\">Since \"steps\" is the only word containing all the letters, that is the answer.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Example 2:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Input: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]</span>\n<span class=\"pl-s\">Output: \"pest\"</span>\n<span class=\"pl-s\">Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these</span>\n<span class=\"pl-s\">\"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears</span>\n<span class=\"pl-s\">earliest of the 3.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">**Constraints:**</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">- 1 &lt;= licensePlate.length &lt;= 7</span>\n<span class=\"pl-s\">- licensePlate contains digits, letters (uppercase or lowercase), or space ' '.</span>\n<span class=\"pl-s\">- 1 &lt;= words.length &lt;= 1000</span>\n<span class=\"pl-s\">- 1 &lt;= words[i].length &lt;= 15</span>\n<span class=\"pl-s\">- words[i] consists of lower case English letters.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">\"\"\"</span>\n\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">typing</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">leetgo_py</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">bisect</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">collections</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">functools</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">heapq</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">itertools</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">operator</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">math</span> \n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">string</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">leetcode</span> <span class=\"pl-k\">as</span> <span class=\"pl-s1\">lc</span>\n\n<span class=\"pl-c\"># @lc code=begin</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Solution</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">shortestCompletingWord</span>(<span class=\"pl-s1\">self</span>, <span class=\"pl-s1\">licensePlate</span>: <span class=\"pl-smi\">str</span>, <span class=\"pl-s1\">words</span>: <span class=\"pl-v\">List</span>[<span class=\"pl-smi\">str</span>]) <span class=\"pl-c1\">-&gt;</span> <span class=\"pl-smi\">str</span>:\n        <span class=\"pl-k\">for</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">in</span> <span class=\"pl-s1\">words</span>:\n            <span class=\"pl-en\">print</span>(<span class=\"pl-s1\">i</span>)\n\n<span class=\"pl-c\"># @lc code=end</span>\n\n<span class=\"pl-k\">if</span> <span class=\"pl-s1\">__name__</span> <span class=\"pl-c1\">==</span> <span class=\"pl-s\">\"__main__\"</span>:\n    <span class=\"pl-s1\">licensePlate</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"1s3 PSt\"</span>\n    <span class=\"pl-s1\">words</span> <span class=\"pl-c1\">=</span> [<span class=\"pl-s\">\"step\"</span>,<span class=\"pl-s\">\"steps\"</span>,<span class=\"pl-s\">\"stripe\"</span>,<span class=\"pl-s\">\"stepple\"</span>]\n    <span class=\"pl-s1\">ans</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">Solution</span>().<span class=\"pl-c1\">shortestCompletingWord</span>(<span class=\"pl-s1\">licensePlate</span>, <span class=\"pl-s1\">words</span>)\n    <span class=\"pl-en\">print</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\n</span>output:\"</span>, <span class=\"pl-en\">serialize</span>(<span class=\"pl-s1\">ans</span>, <span class=\"pl-s\">\"string\"</span>))</pre></div>\n",
    "created": "2025-01-01T21:54:23+00:00",
    "created_utc": "2025-01-01T21:54:23+00:00",
    "updated": "2025-01-01T21:54:23+00:00",
    "updated_utc": "2025-01-01T21:54:23+00:00"
  }
}
